name: CI/CD Pipeline

on:
  push:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout your code
      - uses: actions/checkout@v3

      # 2. Install k3d, Terraform, Ansible, kubectl
      - name: Install prerequisites & Python libs for k8s modules
        run: |
          sudo apt-get update
          sudo apt-get install -y curl apt-transport-https gnupg lsb-release python3-pip

          # Terraform
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install -y terraform

          # kubectl
          curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" \
            | sudo tee /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update && sudo apt-get install -y kubectl

          # Ansible & k3d
          sudo apt-get install -y ansible pipx
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

          # Python libraries for k8s: install into pipxâ€™s ansible-core venv
          pipx inject ansible-core kubernetes openshift

          # Ensure k8s Ansible collections
          ansible-galaxy collection install kubernetes.core community.kubernetes
      # 3. Build & push your image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build & push multi-arch image
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --push \
            -t ghcr.io/${{ github.actor }}/devops-demo:latest .

      # 4. Run your Ansible pipeline (k3d + Terraform + deploy + smoke-test)
      - name: Run deployment playbook
        env:
          ANSIBLE_PYTHON_INTERPRETER: /opt/pipx/venvs/ansible-core/bin/python
        run: ansible-playbook ansible/playbook.yaml

